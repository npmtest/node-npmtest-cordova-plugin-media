{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-media/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_media */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media/lib.npmtest_cordova_plugin_media.js":"/* istanbul instrument in package npmtest_cordova_plugin_media */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_media = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_media = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-media && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_media */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_media\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_media.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_media.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_media.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_media.__dirname + '/lib.npmtest_cordova_plugin_media.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media/node_modules/cordova-plugin-media/www/MediaError.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/**\n * This class contains information about any Media errors.\n*/\n/*\n According to :: http://dev.w3.org/html5/spec-author-view/video.html#mediaerror\n We should never be creating these objects, we should just implement the interface\n which has 1 property for an instance, 'code'\n\n instead of doing :\n    errorCallbackFunction( new MediaError(3,'msg') );\nwe should simply use a literal :\n    errorCallbackFunction( {'code':3} );\n */\n\n var _MediaError = window.MediaError;\n\n\nif(!_MediaError) {\n    window.MediaError = _MediaError = function(code, msg) {\n        this.code = (typeof code != 'undefined') ? code : null;\n        this.message = msg || \"\"; // message is NON-standard! do not use!\n    };\n}\n\n_MediaError.MEDIA_ERR_NONE_ACTIVE    = _MediaError.MEDIA_ERR_NONE_ACTIVE    || 0;\n_MediaError.MEDIA_ERR_ABORTED        = _MediaError.MEDIA_ERR_ABORTED        || 1;\n_MediaError.MEDIA_ERR_NETWORK        = _MediaError.MEDIA_ERR_NETWORK        || 2;\n_MediaError.MEDIA_ERR_DECODE         = _MediaError.MEDIA_ERR_DECODE         || 3;\n_MediaError.MEDIA_ERR_NONE_SUPPORTED = _MediaError.MEDIA_ERR_NONE_SUPPORTED || 4;\n// TODO: MediaError.MEDIA_ERR_NONE_SUPPORTED is legacy, the W3 spec now defines it as below.\n// as defined by http://dev.w3.org/html5/spec-author-view/video.html#error-codes\n_MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = _MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED || 4;\n\nmodule.exports = _MediaError;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media/node_modules/cordova-plugin-media/www/Media.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\nvar argscheck = require('cordova/argscheck'),\n    utils = require('cordova/utils'),\n    exec = require('cordova/exec');\n\nvar mediaObjects = {};\n\n/**\n * This class provides access to the device media, interfaces to both sound and video\n *\n * @constructor\n * @param src                   The file name or url to play\n * @param successCallback       The callback to be called when the file is done playing or recording.\n *                                  successCallback()\n * @param errorCallback         The callback to be called if there is an error.\n *                                  errorCallback(int errorCode) - OPTIONAL\n * @param statusCallback        The callback to be called when media status has changed.\n *                                  statusCallback(int statusCode) - OPTIONAL\n */\nvar Media = function(src, successCallback, errorCallback, statusCallback) {\n    argscheck.checkArgs('sFFF', 'Media', arguments);\n    this.id = utils.createUUID();\n    mediaObjects[this.id] = this;\n    this.src = src;\n    this.successCallback = successCallback;\n    this.errorCallback = errorCallback;\n    this.statusCallback = statusCallback;\n    this._duration = -1;\n    this._position = -1;\n    exec(null, this.errorCallback, \"Media\", \"create\", [this.id, this.src]);\n};\n\n// Media messages\nMedia.MEDIA_STATE = 1;\nMedia.MEDIA_DURATION = 2;\nMedia.MEDIA_POSITION = 3;\nMedia.MEDIA_ERROR = 9;\n\n// Media states\nMedia.MEDIA_NONE = 0;\nMedia.MEDIA_STARTING = 1;\nMedia.MEDIA_RUNNING = 2;\nMedia.MEDIA_PAUSED = 3;\nMedia.MEDIA_STOPPED = 4;\nMedia.MEDIA_MSG = [\"None\", \"Starting\", \"Running\", \"Paused\", \"Stopped\"];\n\n// \"static\" function to return existing objs.\nMedia.get = function(id) {\n    return mediaObjects[id];\n};\n\n/**\n * Start or resume playing audio file.\n */\nMedia.prototype.play = function(options) {\n    exec(null, null, \"Media\", \"startPlayingAudio\", [this.id, this.src, options]);\n};\n\n/**\n * Stop playing audio file.\n */\nMedia.prototype.stop = function() {\n    var me = this;\n    exec(function() {\n        me._position = 0;\n    }, this.errorCallback, \"Media\", \"stopPlayingAudio\", [this.id]);\n};\n\n/**\n * Seek or jump to a new time in the track..\n */\nMedia.prototype.seekTo = function(milliseconds) {\n    var me = this;\n    exec(function(p) {\n        me._position = p;\n    }, this.errorCallback, \"Media\", \"seekToAudio\", [this.id, milliseconds]);\n};\n\n/**\n * Pause playing audio file.\n */\nMedia.prototype.pause = function() {\n    exec(null, this.errorCallback, \"Media\", \"pausePlayingAudio\", [this.id]);\n};\n\n/**\n * Get duration of an audio file.\n * The duration is only set for audio that is playing, paused or stopped.\n *\n * @return      duration or -1 if not known.\n */\nMedia.prototype.getDuration = function() {\n    return this._duration;\n};\n\n/**\n * Get position of audio.\n */\nMedia.prototype.getCurrentPosition = function(success, fail) {\n    var me = this;\n    exec(function(p) {\n        me._position = p;\n        success(p);\n    }, fail, \"Media\", \"getCurrentPositionAudio\", [this.id]);\n};\n\n/**\n * Start recording audio file.\n */\nMedia.prototype.startRecord = function() {\n    exec(null, this.errorCallback, \"Media\", \"startRecordingAudio\", [this.id, this.src]);\n};\n\n/**\n * Stop recording audio file.\n */\nMedia.prototype.stopRecord = function() {\n    exec(null, this.errorCallback, \"Media\", \"stopRecordingAudio\", [this.id]);\n};\n\n/**\n * Pause recording audio file.\n */\nMedia.prototype.pauseRecord = function() {\n    exec(null, this.errorCallback, \"Media\", \"pauseRecordingAudio\", [this.id]);\n};\n\n/**\n* Resume recording audio file.\n*/\nMedia.prototype.resumeRecord = function() {\n    exec(null, this.errorCallback, \"Media\", \"resumeRecordingAudio\", [this.id]);\n};\n\n/**\n * Release the resources.\n */\nMedia.prototype.release = function() {\n    exec(null, this.errorCallback, \"Media\", \"release\", [this.id]);\n};\n\n/**\n * Adjust the volume.\n */\nMedia.prototype.setVolume = function(volume) {\n    exec(null, null, \"Media\", \"setVolume\", [this.id, volume]);\n};\n\n/**\n * Adjust the playback rate.\n */\nMedia.prototype.setRate = function(rate) {\n    if (cordova.platformId === 'ios'){\n        exec(null, null, \"Media\", \"setRate\", [this.id, rate]);\n    } else {\n        console.warn('media.setRate method is currently not supported for', cordova.platformId, 'platform.');\n    }\n};\n\n/**\n * Get amplitude of audio.\n */\nMedia.prototype.getCurrentAmplitude = function(success, fail) {\n    exec(function(p) {\n        success(p);\n    }, fail, \"Media\", \"getCurrentAmplitudeAudio\", [this.id]);\n};\n\n/**\n * Audio has status update.\n * PRIVATE\n *\n * @param id            The media object id (string)\n * @param msgType       The 'type' of update this is\n * @param value         Use of value is determined by the msgType\n */\nMedia.onStatus = function(id, msgType, value) {\n\n    var media = mediaObjects[id];\n\n    if (media) {\n        switch(msgType) {\n            case Media.MEDIA_STATE :\n                if (media.statusCallback) {\n                    media.statusCallback(value);\n                }\n                if (value == Media.MEDIA_STOPPED) {\n                    if (media.successCallback) {\n                        media.successCallback();\n                    }\n                }\n                break;\n            case Media.MEDIA_DURATION :\n                media._duration = value;\n                break;\n            case Media.MEDIA_ERROR :\n                if (media.errorCallback) {\n                    media.errorCallback(value);\n                }\n                break;\n            case Media.MEDIA_POSITION :\n                media._position = Number(value);\n                break;\n            default :\n                if (console.error) {\n                    console.error(\"Unhandled Media.onStatus :: \" + msgType);\n                }\n                break;\n        }\n    } else if (console.error) {\n        console.error(\"Received Media.onStatus callback for unknown media :: \" + id);\n    }\n\n};\n\nmodule.exports = Media;\n\nfunction onMessageFromNative(msg) {\n    if (msg.action == 'status') {\n        Media.onStatus(msg.status.id, msg.status.msgType, msg.status.value);\n    } else {\n        throw new Error('Unknown media action' + msg.action);\n    }\n}\n\nif (cordova.platformId === 'android' || cordova.platformId === 'amazon-fireos' || cordova.platformId === 'windowsphone') {\n\n    var channel = require('cordova/channel');\n\n    channel.createSticky('onMediaPluginReady');\n    channel.waitForInitialization('onMediaPluginReady');\n\n    channel.onCordovaReady.subscribe(function() {\n        exec(onMessageFromNative, undefined, 'Media', 'messageChannel', []);\n        channel.initializationComplete('onMediaPluginReady');\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media/node_modules/cordova-plugin-media/src/blackberry10/index.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* global qnx, PluginResult */\n\nvar audioObjects = {},\n    mediaErrorsHandled = false;\n\n// There is a bug in the webplatform handling of media error\n// dialogs prior to 10.2. This function needs to be run once\n// on the webview which plays audio to prevent freezing.\nfunction handleMediaErrors() {\n    var webview = qnx.webplatform.getWebViews()[0],\n        handler = webview.onDialogRequested;\n    if (!mediaErrorsHandled) {\n        webview.allowWebEvent(\"DialogRequested\");\n        webview.onDialogRequested = undefined;\n        webview.onDialogRequested = function (eventArgs) {\n            var parsedArgs = JSON.parse(eventArgs);\n            if (parsedArgs.dialogType === 'MediaError') {\n                return '{\"setPreventDefault\": true}';\n            }\n            handler(eventArgs);\n        };\n        mediaErrorsHandled = true;\n    }\n}\n\nmodule.exports = {\n\n    create: function (success, fail, args, env) {\n        var result = new PluginResult(args, env),\n            id;\n\n        if (!args[0]) {\n            result.error(\"Media Object id was not sent in arguments\");\n            return;\n        }\n\n        id = JSON.parse(decodeURIComponent(args[0]));\n\n        if (!args[1]){\n            audioObjects[id] = new Audio();\n        } else {\n            audioObjects[id] = new Audio(JSON.parse(decodeURIComponent(args[1])));\n        }\n\n        handleMediaErrors();\n\n        result.ok();\n    },\n\n    startPlayingAudio: function (success, fail, args, env) {\n\n        var audio,\n            id,\n            result = new PluginResult(args, env);\n\n        if (!args[0]) {\n            result.error(\"Media Object id was not sent in arguments\");\n            return;\n        }\n\n        id = JSON.parse(decodeURIComponent(args[0]));\n\n        audio = audioObjects[id];\n\n        if (!audio) {\n            result.error(\"Audio object has not been initialized\");\n        } else {\n            audio.play();\n            result.ok();\n        }\n    },\n\n    stopPlayingAudio: function (success, fail, args, env) {\n\n        var audio,\n            id,\n            result = new PluginResult(args, env);\n\n        if (!args[0]) {\n            result.error(\"Media Object id was not sent in arguments\");\n            return;\n        }\n\n        id = JSON.parse(decodeURIComponent(args[0]));\n\n        audio = audioObjects[id];\n\n        if (!audio) {\n            result.error(\"Audio Object has not been initialized\");\n            return;\n        }\n\n        audio.pause();\n        audio.currentTime = 0;\n\n        result.ok();\n    },\n\n    seekToAudio: function (success, fail, args, env) {\n\n        var audio,\n            result = new PluginResult(args, env);\n\n        if (!args[0]) {\n            result.error(\"Media Object id was not sent in arguments\");\n            return;\n        }\n\n        audio = audioObjects[JSON.parse(decodeURIComponent(args[0]))];\n\n        if (!audio) {\n            result.error(\"Audio Object has not been initialized\");\n        } else if (!args[1]) {\n            result.error(\"Media seek time argument not found\");\n        } else {\n            try {\n                audio.currentTime = JSON.parse(decodeURIComponent(args[1])) / 1000;\n                result.ok();\n            } catch (e) {\n                result.error(\"Error seeking audio: \" + e);\n            }\n        }\n    },\n\n    pausePlayingAudio: function (success, fail, args, env) {\n\n        var audio,\n            result = new PluginResult(args, env);\n\n        if (!args[0]) {\n            result.error(\"Media Object id was not sent in arguments\");\n            return;\n        }\n\n        audio = audioObjects[JSON.parse(decodeURIComponent(args[0]))];\n\n        if (!audio) {\n            result.error(\"Audio Object has not been initialized\");\n            return;\n        }\n\n        audio.pause();\n    },\n\n    getCurrentPositionAudio: function (success, fail, args, env) {\n\n        var audio,\n            result = new PluginResult(args, env);\n\n        if (!args[0]) {\n            result.error(\"Media Object id was not sent in arguments\");\n            return;\n        }\n\n        audio = audioObjects[JSON.parse(decodeURIComponent(args[0]))];\n\n        if (!audio) {\n            result.error(\"Audio Object has not been initialized\");\n            return;\n        }\n\n        result.ok(audio.currentTime);\n    },\n\n    getDuration: function (success, fail, args, env) {\n\n        var audio,\n            result = new PluginResult(args, env);\n\n        if (!args[0]) {\n            result.error(\"Media Object id was not sent in arguments\");\n            return;\n        }\n\n        audio = audioObjects[JSON.parse(decodeURIComponent(args[0]))];\n\n        if (!audio) {\n            result.error(\"Audio Object has not been initialized\");\n            return;\n        }\n\n        result.ok(audio.duration);\n    },\n\n    startRecordingAudio: function (success, fail, args, env) {\n        var result = new PluginResult(args, env);\n        result.error(\"Not supported\");\n    },\n\n    stopRecordingAudio: function (success, fail, args, env) {\n        var result = new PluginResult(args, env);\n        result.error(\"Not supported\");\n    },\n\n    release: function (success, fail, args, env) {\n        var audio,\n            id,\n            result = new PluginResult(args, env);\n\n        if (!args[0]) {\n            result.error(\"Media Object id was not sent in arguments\");\n            return;\n        }\n\n        id = JSON.parse(decodeURIComponent(args[0]));\n\n        audio = audioObjects[id];\n\n        if (audio) {\n            if(audio.src !== \"\"){\n                audio.src = undefined;\n            }\n            audioObjects[id] = undefined;\n        }\n\n        result.ok();\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media/node_modules/cordova-plugin-media/src/tizen/MediaProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* global webkitURL */\n\nvar Media = require('cordova-plugin-media.Media');\n\nvar MediaError = require('cordova-plugin-media.MediaError'),\n    audioObjects = {};\n\nmodule.exports = {\n    // Initiates the audio file\n    create:function(successCallback, errorCallback, args) {\n        var id = args[0], src = args[1];\n\n        console.log(\"media::create() - id =\" + id + \", src =\" + src);\n\n        audioObjects[id] = new Audio(src);\n\n        audioObjects[id].onStalledCB = function () {\n            console.log(\"media::onStalled()\");\n\n            audioObjects[id].timer = window.setTimeout(\n                    function () {\n                        audioObjects[id].pause();\n\n                        if (audioObjects[id].currentTime !== 0)\n                            audioObjects[id].currentTime = 0;\n\n                        console.log(\"media::onStalled() - MEDIA_ERROR -> \" + MediaError.MEDIA_ERR_ABORTED);\n\n                        var err = new MediaError(MediaError.MEDIA_ERR_ABORTED, \"Stalled\");\n\n                        Media.onStatus(id, Media.MEDIA_ERROR, err);\n                    },\n                    2000);\n        };\n\n        audioObjects[id].onEndedCB = function () {\n            console.log(\"media::onEndedCB() - MEDIA_STATE -> MEDIA_STOPPED\");\n\n            Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_STOPPED);\n        };\n\n        audioObjects[id].onErrorCB = function () {\n            console.log(\"media::onErrorCB() - MEDIA_ERROR -> \" + event.srcElement.error);\n\n            Media.onStatus(id, Media.MEDIA_ERROR, event.srcElement.error);\n        };\n\n        audioObjects[id].onPlayCB = function () {\n            console.log(\"media::onPlayCB() - MEDIA_STATE -> MEDIA_STARTING\");\n\n            Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_STARTING);\n        };\n\n        audioObjects[id].onPlayingCB = function () {\n            console.log(\"media::onPlayingCB() - MEDIA_STATE -> MEDIA_RUNNING\");\n\n            Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_RUNNING);\n        };\n\n        audioObjects[id].onDurationChangeCB = function () {\n            console.log(\"media::onDurationChangeCB() - MEDIA_DURATION -> \" +  audioObjects[id].duration);\n\n            Media.onStatus(id, Media.MEDIA_DURATION, audioObjects[id].duration);\n        };\n\n        audioObjects[id].onTimeUpdateCB = function () {\n            console.log(\"media::onTimeUpdateCB() - MEDIA_POSITION -> \" +  audioObjects[id].currentTime);\n\n            Media.onStatus(id, Media.MEDIA_POSITION, audioObjects[id].currentTime);\n        };\n\n        audioObjects[id].onCanPlayCB = function () {\n            console.log(\"media::onCanPlayCB()\");\n\n            window.clearTimeout(audioObjects[id].timer);\n\n            audioObjects[id].play();\n        };\n\n    },\n\n    // Start playing the audio\n    startPlayingAudio:function(successCallback, errorCallback, args) {\n        var id = args[0], src = args[1], options = args[2];\n\n        console.log(\"media::startPlayingAudio() - id =\" + id + \", src =\" + src + \", options =\" + options);\n\n        audioObjects[id].addEventListener('canplay', audioObjects[id].onCanPlayCB);\n        audioObjects[id].addEventListener('ended', audioObjects[id].onEndedCB);\n        audioObjects[id].addEventListener('timeupdate', audioObjects[id].onTimeUpdateCB);\n        audioObjects[id].addEventListener('durationchange', audioObjects[id].onDurationChangeCB);\n        audioObjects[id].addEventListener('playing', audioObjects[id].onPlayingCB);\n        audioObjects[id].addEventListener('play', audioObjects[id].onPlayCB);\n        audioObjects[id].addEventListener('error', audioObjects[id].onErrorCB);\n        audioObjects[id].addEventListener('stalled', audioObjects[id].onStalledCB);\n\n        audioObjects[id].play();\n    },\n\n    // Stops the playing audio\n    stopPlayingAudio:function(successCallback, errorCallback, args) {\n        var id = args[0];\n\n        window.clearTimeout(audioObjects[id].timer);\n\n        audioObjects[id].pause();\n\n        if (audioObjects[id].currentTime !== 0)\n            audioObjects[id].currentTime = 0;\n\n        console.log(\"media::stopPlayingAudio() - MEDIA_STATE -> MEDIA_STOPPED\");\n\n        Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_STOPPED);\n\n        audioObjects[id].removeEventListener('canplay', audioObjects[id].onCanPlayCB);\n        audioObjects[id].removeEventListener('ended', audioObjects[id].onEndedCB);\n        audioObjects[id].removeEventListener('timeupdate', audioObjects[id].onTimeUpdateCB);\n        audioObjects[id].removeEventListener('durationchange', audioObjects[id].onDurationChangeCB);\n        audioObjects[id].removeEventListener('playing', audioObjects[id].onPlayingCB);\n        audioObjects[id].removeEventListener('play', audioObjects[id].onPlayCB);\n        audioObjects[id].removeEventListener('error', audioObjects[id].onErrorCB);\n        audioObjects[id].removeEventListener('error', audioObjects[id].onStalledCB);\n    },\n\n    // Seeks to the position in the audio\n    seekToAudio:function(successCallback, errorCallback, args) {\n        var id = args[0], milliseconds = args[1];\n\n        console.log(\"media::seekToAudio()\");\n\n        audioObjects[id].currentTime = milliseconds;\n        successCallback( audioObjects[id].currentTime);\n    },\n\n    // Pauses the playing audio\n    pausePlayingAudio:function(successCallback, errorCallback, args) {\n        var id = args[0];\n\n        console.log(\"media::pausePlayingAudio() - MEDIA_STATE -> MEDIA_PAUSED\");\n\n        audioObjects[id].pause();\n\n        Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_PAUSED);\n    },\n\n    // Gets current position in the audio\n    getCurrentPositionAudio:function(successCallback, errorCallback, args) {\n        var id = args[0];\n        console.log(\"media::getCurrentPositionAudio()\");\n        successCallback(audioObjects[id].currentTime);\n    },\n\n    // Start recording audio\n    startRecordingAudio:function(successCallback, errorCallback, args) {\n        var id = args[0], src = args[1];\n\n        console.log(\"media::startRecordingAudio() - id =\" + id + \", src =\" + src);\n\n        function gotStreamCB(stream) {\n            audioObjects[id].src = webkitURL.createObjectURL(stream);\n            console.log(\"media::startRecordingAudio() - stream CB\");\n        }\n\n        function gotStreamFailedCB(error) {\n            console.log(\"media::startRecordingAudio() - error CB:\" + error.toString());\n        }\n\n        if (navigator.webkitGetUserMedia) {\n            audioObjects[id] = new Audio();\n            navigator.webkitGetUserMedia('audio', gotStreamCB, gotStreamFailedCB);\n        } else {\n            console.log(\"webkitGetUserMedia not supported\");\n        }\n        successCallback();\n    },\n\n    // Stop recording audio\n    stopRecordingAudio:function(successCallback, errorCallback, args) {\n        var id = args[0];\n\n        console.log(\"media::stopRecordingAudio() - id =\" + id);\n\n        audioObjects[id].pause();\n        successCallback();\n    },\n\n    // Release the media object\n    release:function(successCallback, errorCallback, args) {\n        var id = args[0];\n        window.clearTimeout(audioObjects[id].timer);\n        console.log(\"media::release()\");\n    },\n\n    setVolume:function(successCallback, errorCallback, args) {\n        var id = args[0], volume = args[1];\n\n        console.log(\"media::setVolume()\");\n\n        audioObjects[id].volume = volume;\n    }\n};\n\nrequire(\"cordova/tizen/commandProxy\").add(\"Media\", module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media/node_modules/cordova-plugin-media/src/windows/MediaProxy.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/*global Windows:true */\n\nvar Media = require('cordova-plugin-media.Media');\nvar MediaError = require('cordova-plugin-media.MediaError');\n\nvar recordedFile;\nvar tempFolderAppDataBasePath = 'ms-appdata:///temp/',\n    localFolderAppDataBasePath = 'ms-appdata:///local/',\n    tempFolderFullPath = Windows.Storage.ApplicationData.current.temporaryFolder.path,\n    localFolderFullPath = Windows.Storage.ApplicationData.current.localFolder.path;\n\nvar PARAMETER_IS_INCORRECT = -2147024809;\nvar SUPPORTED_EXTENSIONS = ['.mp3', '.wma', '.wav', '.cda', '.adx', '.wm', '.m3u', '.wmx', '.m4a'];\nvar SUPPORTED_PREFIXES = ['http', 'https', 'rstp'];\n\nvar fsTypes = {\n    PERSISTENT: 'PERSISTENT',\n    TEMPORARY: 'TEMPORARY'\n};\n\nmodule.exports = {\n    mediaCaptureMrg:null,\n\n    // Initiates the audio file\n    create:function(win, lose, args) {\n        var id = args[0];\n\n        var srcUri = processUri(args[1]);\n\n        var createAudioNode = !!args[2];\n        var thisM = Media.get(id);\n\n        Media.prototype.node = null;\n\n        var prefix = args[1].split(':').shift();\n        var extension = srcUri.extension;\n        if (thisM.node === null) {\n            if (SUPPORTED_EXTENSIONS.indexOf(extension) === -1 && SUPPORTED_PREFIXES.indexOf(prefix) === -1) {\n                if (lose) {\n                    lose({ code: MediaError.MEDIA_ERR_ABORTED });\n                }\n                return false; // unable to create\n            }\n\n            // Don't create Audio object in case of record mode\n            if (createAudioNode === true) {\n                thisM.node = new Audio();\n                thisM.node.msAudioCategory = \"BackgroundCapableMedia\";\n                thisM.node.src = srcUri.absoluteCanonicalUri;\n\n                thisM.node.onloadstart = function () {\n                    Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_STARTING);\n                };\n\n                thisM.node.ontimeupdate = function (e) {\n                    Media.onStatus(id, Media.MEDIA_POSITION, e.target.currentTime);\n                };\n\n                thisM.node.onplaying = function () {\n                    Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_RUNNING);\n                };\n\n                thisM.node.ondurationchange = function (e) {\n                    Media.onStatus(id, Media.MEDIA_DURATION, e.target.duration || -1);\n                };\n\n                thisM.node.onerror = function (e) {\n                    // Due to media.spec.15 It should return MediaError for bad filename\n                    var err = e.target.error.code === MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED ?\n                        { code: MediaError.MEDIA_ERR_ABORTED } :\n                        e.target.error;\n\n                    Media.onStatus(id, Media.MEDIA_ERROR, err);\n                };\n\n                thisM.node.onended = function () {\n                    Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_STOPPED);\n                };\n            }\n        }\n\n        return true; // successfully created\n    },\n\n    // Start playing the audio\n    startPlayingAudio:function(win, lose, args) {\n        var id = args[0];\n        //var src = args[1];\n        //var options = args[2];\n\n        var thisM = Media.get(id);\n        // if Media was released, then node will be null and we need to create it again\n        if (!thisM.node) {\n            args[2] = true; // Setting createAudioNode to true\n            if (!module.exports.create(win, lose, args)) {\n                // there is no reason to continue if we can't create media\n                // corresponding callback has been invoked in create so we don't need to call it here\n                return;\n            }\n        }\n\n        try {\n            thisM.node.play();\n        } catch (err) {\n            if (lose) {\n                lose({code:MediaError.MEDIA_ERR_ABORTED});\n            }\n        }\n    },\n\n    // Stops the playing audio\n    stopPlayingAudio:function(win, lose, args) {\n        var id = args[0];\n        try {\n            var thisM = Media.get(id);\n            thisM.node.pause();\n            thisM.node.currentTime = 0;\n            Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_STOPPED);\n        } catch (err) {\n            lose(\"Failed to stop: \"+err);\n        }\n    },\n\n    // Seeks to the position in the audio\n    seekToAudio:function(win, lose, args) {\n        var id = args[0];\n        var milliseconds = args[1];\n        var thisM = Media.get(id);\n        try {\n            thisM.node.currentTime = milliseconds / 1000;\n            win(thisM.node.currentTime);\n        } catch (err) {\n            lose(\"Failed to seek: \"+err);\n        }\n    },\n\n    // Pauses the playing audio\n    pausePlayingAudio:function(win, lose, args) {\n        var id = args[0];\n        var thisM = Media.get(id);\n        try {\n            thisM.node.pause();\n            Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_PAUSED);\n        } catch (err) {\n            lose(\"Failed to pause: \"+err);\n        }\n    },\n\n    // Gets current position in the audio\n    getCurrentPositionAudio:function(win, lose, args) {\n        var id = args[0];\n        try {\n            var p = (Media.get(id)).node.currentTime;\n            win(p);\n        } catch (err) {\n            lose(err);\n        }\n    },\n\n    // Start recording audio\n    startRecordingAudio:function(win, lose, args) {\n        var id = args[0];\n        var srcUri = processUri(args[1]);\n\n        var dest = parseUriToPathAndFilename(srcUri);\n        var destFileName = dest.fileName;\n\n        var success = function () {\n            Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_RUNNING);\n        };\n\n        var error = function (reason) {\n            Media.onStatus(id, Media.MEDIA_ERROR, reason);\n        };\n\n        // Initialize device\n        Media.prototype.mediaCaptureMgr = null;\n        var thisM = (Media.get(id));\n        var captureInitSettings = new Windows.Media.Capture.MediaCaptureInitializationSettings();\n        captureInitSettings.streamingCaptureMode = Windows.Media.Capture.StreamingCaptureMode.audio;\n        thisM.mediaCaptureMgr = new Windows.Media.Capture.MediaCapture();\n        thisM.mediaCaptureMgr.addEventListener(\"failed\", error);\n\n        thisM.mediaCaptureMgr.initializeAsync(captureInitSettings).done(function (result) {\n            thisM.mediaCaptureMgr.addEventListener(\"recordlimitationexceeded\", error);\n            thisM.mediaCaptureMgr.addEventListener(\"failed\", error);\n\n            // Start recording\n            Windows.Storage.ApplicationData.current.temporaryFolder.createFileAsync(destFileName, Windows.Storage.CreationCollisionOption.replaceExisting).done(function (newFile) {\n                recordedFile = newFile;\n                var encodingProfile = null;\n                switch (newFile.fileType) {\n                    case '.m4a':\n                        encodingProfile = Windows.Media.MediaProperties.MediaEncodingProfile.createM4a(Windows.Media.MediaProperties.AudioEncodingQuality.auto);\n                        break;\n                    case '.mp3':\n                        encodingProfile = Windows.Media.MediaProperties.MediaEncodingProfile.createMp3(Windows.Media.MediaProperties.AudioEncodingQuality.auto);\n                        break;\n                    case '.wma':\n                        encodingProfile = Windows.Media.MediaProperties.MediaEncodingProfile.createWma(Windows.Media.MediaProperties.AudioEncodingQuality.auto);\n                        break;\n                    default:\n                        error(\"Invalid file type for record\");\n                        break;\n                }\n                thisM.mediaCaptureMgr.startRecordToStorageFileAsync(encodingProfile, newFile).done(success, error);\n            }, error);\n        }, error);\n    },\n\n    // Stop recording audio\n    stopRecordingAudio:function(win, lose, args) {\n        var id = args[0];\n        var thisM = Media.get(id);\n        var srcUri = processUri(thisM.src);\n\n        var dest = parseUriToPathAndFilename(srcUri);\n        var destPath = dest.path;\n        var destFileName = dest.fileName;\n        var fsType = dest.fsType;\n\n        var success = function () {\n            Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_STOPPED);\n        };\n\n        var error = function (reason) {\n            Media.onStatus(id, Media.MEDIA_ERROR, reason);\n        };\n\n        thisM.mediaCaptureMgr.stopRecordAsync().done(function () {\n            if (fsType === fsTypes.TEMPORARY) {\n                if (!destPath) {\n                    // if path is not defined, we leave recorded file in temporary folder (similar to iOS)\n                    success();\n                } else {\n                    Windows.Storage.ApplicationData.current.temporaryFolder.getFolderAsync(destPath).done(function (destFolder) {\n                        recordedFile.copyAsync(destFolder, destFileName, Windows.Storage.CreationCollisionOption.replaceExisting).done(success, error);\n                    }, error);\n                }\n            } else {\n                // Copying file to persistent storage\n                if (!destPath) {\n                    recordedFile.copyAsync(Windows.Storage.ApplicationData.current.localFolder, destFileName, Windows.Storage.CreationCollisionOption.replaceExisting).done(success, error);\n                } else {\n                    Windows.Storage.ApplicationData.current.localFolder.getFolderAsync(destPath).done(function (destFolder) {\n                        recordedFile.copyAsync(destFolder, destFileName, Windows.Storage.CreationCollisionOption.replaceExisting).done(success, error);\n                    }, error);\n                }\n            }\n        }, error);\n    },\n\n    // Release the media object\n    release:function(win, lose, args) {\n        var id = args[0];\n        var thisM = Media.get(id);\n        try {\n            if (thisM.node) {\n                thisM.node.onloadedmetadata = null;\n                // Unsubscribing as the media object is being released\n                thisM.node.onerror = null;\n                // Needed to avoid \"0x80070005 - JavaScript runtime error: Access is denied.\" on copyAsync\n                thisM.node.src = null;\n                delete thisM.node;\n            }\n        } catch (err) {\n            lose(\"Failed to release: \"+err);\n        }\n    },\n    setVolume:function(win, lose, args) {\n        var id = args[0];\n        var volume = args[1];\n        var thisM = Media.get(id);\n        thisM.volume = volume;\n    }\n};\n\n/**\n * Converts a path to Windows.Foundation.Uri basing on App data temporary folder \n * if scheme is not defined, e.g.: path/to/file.m4a -> ms-appdata:///temp/path/to/file.m4a\n * @param  {String} src Input path\n * @return {Object}     Windows.Foundation.Uri\n */\nfunction setTemporaryFsByDefault(src) {\n    var uri;\n    try {\n        uri = new Windows.Foundation.Uri(src);\n    } catch (e) {\n        if (e.number === PARAMETER_IS_INCORRECT) {\n            // Use TEMPORARY fs there is no 'scheme:'\n            uri = new Windows.Foundation.Uri(tempFolderAppDataBasePath, src);\n        } else {\n            throw e;\n        }\n    } finally {\n        return uri;\n    }\n}\n\n/**\n * Convert native full path to ms-appdata path\n * @param  {Object} uri Windows.Foundation.Uri\n * @return {Object}     ms-appdata Windows.Foundation.Uri\n */\nfunction fullPathToAppData(uri) {\n    if (uri.schemeName === 'file') {\n        if (uri.rawUri.indexOf(Windows.Storage.ApplicationData.current.localFolder.path) !== -1) {\n            // Also remove path' beginning slash to avoid losing folder name part\n            uri = new Windows.Foundation.Uri(localFolderAppDataBasePath, uri.rawUri.replace(localFolderFullPath, '').replace(/^[\\\\\\/]{1,2}/, ''));\n        } else if (uri.rawUri.indexOf(Windows.Storage.ApplicationData.current.temporaryFolder.path) !== -1) {\n            uri = new Windows.Foundation.Uri(tempFolderAppDataBasePath, uri.rawUri.replace(tempFolderFullPath, '').replace(/^[\\\\\\/]{1,2}/, ''));\n        } else {\n            throw new Error('Not supported file uri: ' + uri.rawUri);\n        }\n    }\n\n    return uri;\n}\n\n/**\n * Converts cdvfile paths to ms-appdata path\n * @param  {Object} uri Input cdvfile scheme Windows.Foundation.Uri\n * @return {Object}     Windows.Foundation.Uri based on App data path\n */\nfunction cdvfileToAppData(uri) {\n    var cdvFsRoot;\n\n    if (uri.schemeName === 'cdvfile') {\n        cdvFsRoot = uri.path.split('/')[1];\n        if (cdvFsRoot === 'temporary') {\n            return new Windows.Foundation.Uri(tempFolderAppDataBasePath, uri.path.split('/').slice(2).join('/'));\n        } else if (cdvFsRoot === 'persistent') {\n            return new Windows.Foundation.Uri(localFolderAppDataBasePath, uri.path.split('/').slice(2).join('/'));\n        } else {\n            throw new Error(cdvFsRoot + ' cdvfile root is not supported on Windows');\n        }\n    }\n\n    return uri;\n}\n\n/**\n * Prepares media src for internal usage\n * @param  {String} src Input media path\n * @return {Object}     Windows.Foundation.Uri\n */\nfunction processUri(src) {\n    // Collapse double slashes (File plugin issue): ms-appdata:///temp//recs/memos/media.m4a => ms-appdata:///temp/recs/memos/media.m4a\n    src = src.replace(/([^\\/:])(\\/\\/)([^\\/])/g, '$1/$3');\n\n    // Remove beginning slashes\n    src = src.replace(/^[\\\\\\/]{1,2}/, '');\n\n    var uri = setTemporaryFsByDefault(src);\n\n    uri = fullPathToAppData(uri);\n    uri = cdvfileToAppData(uri);\n\n    return uri;\n}\n\n/**\n * Extracts path, filename and filesystem type from Uri\n * @param  {Object} uri Windows.Foundation.Uri\n * @return {Object}     Object containing path, filename and filesystem type\n */\nfunction parseUriToPathAndFilename(uri) {\n    // Removing scheme and location, using backslashes: ms-appdata:///local/path/to/file.m4a -> path\\\\to\\\\file.m4a\n    var normalizedSrc = uri.path.split('/').slice(2).join('\\\\');\n\n    var path = normalizedSrc.substr(0, normalizedSrc.lastIndexOf('\\\\'));\n    var fileName = normalizedSrc.replace(path + '\\\\', '');\n\n    var fsType;\n\n    if (uri.path.split('/')[1] === 'local') {\n        fsType = fsTypes.PERSISTENT;\n    } else if (uri.path.split('/')[1] === 'temp') {\n        fsType = fsTypes.TEMPORARY;\n    }\n\n    return {\n        path: path,\n        fileName: fileName,\n        fsType: fsType\n    };\n}\n\nrequire(\"cordova/exec/proxy\").add(\"Media\",module.exports);\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-media/node_modules/cordova-plugin-media/www/browser/Media.js":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n*/\n\n/* global MediaError */\n\nvar argscheck = require('cordova/argscheck'),\n    utils = require('cordova/utils');\n\nvar mediaObjects = {};\n\n/**\n * This class provides access to the device media, interfaces to both sound and video\n *\n * @constructor\n * @param src                   The file name or url to play\n * @param successCallback       The callback to be called when the file is done playing or recording.\n *                                  successCallback()\n * @param errorCallback         The callback to be called if there is an error.\n *                                  errorCallback(int errorCode) - OPTIONAL\n * @param statusCallback        The callback to be called when media status has changed.\n *                                  statusCallback(int statusCode) - OPTIONAL\n */\nvar Media = function(src, successCallback, errorCallback, statusCallback) {\n    argscheck.checkArgs('SFFF', 'Media', arguments);\n    this.id = utils.createUUID();\n    mediaObjects[this.id] = this;\n    this.src = src;\n    this.successCallback = successCallback;\n    this.errorCallback = errorCallback;\n    this.statusCallback = statusCallback;\n    this._duration = -1;\n    this._position = -1;\n\n    Media.onStatus(this.id, Media.MEDIA_STATE, Media.MEDIA_STARTING);\n    \n    try {\n        this.node = createNode(this);\n    } catch (err) {\n        Media.onStatus(this.id, Media.MEDIA_ERROR, { code: MediaError.MEDIA_ERR_ABORTED });\n    }\n};\n\n/**\n * Creates new Audio node and with necessary event listeners attached\n * @param  {Media} media Media object\n * @return {Audio}       Audio element \n */\nfunction createNode (media) {\n    var node = new Audio();\n\n    node.onloadstart = function () {\n        Media.onStatus(media.id, Media.MEDIA_STATE, Media.MEDIA_STARTING);\n    };\n\n    node.onplaying = function () {\n        Media.onStatus(media.id, Media.MEDIA_STATE, Media.MEDIA_RUNNING);\n    };\n\n    node.ondurationchange = function (e) {\n        Media.onStatus(media.id, Media.MEDIA_DURATION, e.target.duration || -1);\n    };\n\n    node.onerror = function (e) {\n        // Due to media.spec.15 It should return MediaError for bad filename\n        var err = e.target.error.code === MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED ?\n            { code: MediaError.MEDIA_ERR_ABORTED } :\n            e.target.error;\n\n        Media.onStatus(media.id, Media.MEDIA_ERROR, err);\n    };\n\n    node.onended = function () {\n        Media.onStatus(media.id, Media.MEDIA_STATE, Media.MEDIA_STOPPED);\n    };\n\n    if (media.src) {\n        node.src = media.src;\n    }\n\n    return node;\n}\n\n// Media messages\nMedia.MEDIA_STATE = 1;\nMedia.MEDIA_DURATION = 2;\nMedia.MEDIA_POSITION = 3;\nMedia.MEDIA_ERROR = 9;\n\n// Media states\nMedia.MEDIA_NONE = 0;\nMedia.MEDIA_STARTING = 1;\nMedia.MEDIA_RUNNING = 2;\nMedia.MEDIA_PAUSED = 3;\nMedia.MEDIA_STOPPED = 4;\nMedia.MEDIA_MSG = [\"None\", \"Starting\", \"Running\", \"Paused\", \"Stopped\"];\n\n/**\n * Start or resume playing audio file.\n */\nMedia.prototype.play = function() {\n\n    // if Media was released, then node will be null and we need to create it again\n    if (!this.node) {\n        try {\n            this.node = createNode(this);\n        } catch (err) {\n            Media.onStatus(this.id, Media.MEDIA_ERROR, { code: MediaError.MEDIA_ERR_ABORTED });\n        }\n    }\n\n    this.node.play();\n};\n\n/**\n * Stop playing audio file.\n */\nMedia.prototype.stop = function() {\n    try {\n        this.pause();\n        this.seekTo(0);\n        Media.onStatus(this.id, Media.MEDIA_STATE, Media.MEDIA_STOPPED);\n    } catch (err) {\n        Media.onStatus(this.id, Media.MEDIA_ERROR, err);\n    }\n};\n\n/**\n * Seek or jump to a new time in the track..\n */\nMedia.prototype.seekTo = function(milliseconds) {\n    try {\n        this.node.currentTime = milliseconds / 1000;\n    } catch (err) {\n        Media.onStatus(this.id, Media.MEDIA_ERROR, err);\n    }\n};\n\n/**\n * Pause playing audio file.\n */\nMedia.prototype.pause = function() {\n    try {\n        this.node.pause();\n        Media.onStatus(this.id, Media.MEDIA_STATE, Media.MEDIA_PAUSED);\n    } catch (err) {\n        Media.onStatus(this.id, Media.MEDIA_ERROR, err);\n    }};\n\n/**\n * Get duration of an audio file.\n * The duration is only set for audio that is playing, paused or stopped.\n *\n * @return      duration or -1 if not known.\n */\nMedia.prototype.getDuration = function() {\n    return this._duration;\n};\n\n/**\n * Get position of audio.\n */\nMedia.prototype.getCurrentPosition = function(success, fail) {\n    try {\n        var p = this.node.currentTime;\n        Media.onStatus(this.id, Media.MEDIA_POSITION, p);\n        success(p);\n    } catch (err) {\n        fail(err);\n    }\n};\n\n/**\n * Start recording audio file.\n */\nMedia.prototype.startRecord = function() {\n    Media.onStatus(this.id, Media.MEDIA_ERROR, \"Not supported\");\n};\n\n/**\n * Stop recording audio file.\n */\nMedia.prototype.stopRecord = function() {\n    Media.onStatus(this.id, Media.MEDIA_ERROR, \"Not supported\");\n};\n\n/**\n * Release the resources.\n */\nMedia.prototype.release = function() {\n    try {\n        delete this.node;\n    } catch (err) {\n        Media.onStatus(this.id, Media.MEDIA_ERROR, err);\n    }};\n\n/**\n * Adjust the volume.\n */\nMedia.prototype.setVolume = function(volume) {\n    this.node.volume = volume;\n};\n\n/**\n * Audio has status update.\n * PRIVATE\n *\n * @param id            The media object id (string)\n * @param msgType       The 'type' of update this is\n * @param value         Use of value is determined by the msgType\n */\nMedia.onStatus = function(id, msgType, value) {\n\n    var media = mediaObjects[id];\n\n    if (media) {\n        switch(msgType) {\n            case Media.MEDIA_STATE :\n                if (media.statusCallback) {\n                    media.statusCallback(value);\n                }\n                if (value === Media.MEDIA_STOPPED) {\n                    if (media.successCallback) {\n                        media.successCallback();\n                    }\n                }\n                break;\n            case Media.MEDIA_DURATION :\n                media._duration = value;\n                break;\n            case Media.MEDIA_ERROR :\n                if (media.errorCallback) {\n                    media.errorCallback(value);\n                }\n                break;\n            case Media.MEDIA_POSITION :\n                media._position = Number(value);\n                break;\n            default :\n                if (console.error) {\n                    console.error(\"Unhandled Media.onStatus :: \" + msgType);\n                }\n                break;\n        }\n    } else if (console.error) {\n        console.error(\"Received Media.onStatus callback for unknown media :: \" + id);\n    }\n};\n\nmodule.exports = Media;\n"}